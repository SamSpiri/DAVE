"""
chat_app.py
"""
import base64
import os
import hmac
import streamlit as st
from openai import OpenAI
from openai.types.beta.assistant_stream_event import (
    ThreadRunStepCreated,
    ThreadRunStepDelta,
    ThreadRunStepCompleted,
    ThreadMessageCreated,
    ThreadMessageDelta,
    ThreadMessageCompleted
    )
from openai.types.beta.threads.text_delta_block import TextDeltaBlock 
from openai.types.beta.threads.runs.tool_calls_step_details import ToolCallsStepDetails
from openai.types.beta.threads.runs.code_interpreter_tool_call import (
    CodeInterpreterOutputImage,
    CodeInterpreterOutputLogs
    )



def check_password():
    """Returns `True` if the user had the correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if hmac.compare_digest(st.session_state["password"], st.secrets["password"]):
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # Don't store the password.
        else:
            st.session_state["password_correct"] = False

    # Return True if the password is validated.
    if st.session_state.get("password_correct", False):
        return True

    # Show input for password.
    st.text_input(
        "Password", type="password", on_change=password_entered, key="password"
    )
    if "password_correct" in st.session_state:
        st.error("üòï Password incorrect")
    return False


if not check_password():
    st.stop()  # Do not continue if check_password is not True.

# Set page config
st.set_page_config(page_title="Vedic GPT Chat",
                   layout='wide')

st.markdown("""
    <style>
        .reportview-container {
            margin-top: -2em;
        }
        #MainMenu {visibility: hidden;}
        .stDeployButton {display:none;}
        footer {visibility: hidden;}
        #stDecoration {display:none;}
    </style>
""", unsafe_allow_html=True)

# Get secrets
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
ASSISTANT_ID = st.secrets["ASSISTANT_ID"]

# Initialise the OpenAI client, and retrieve the assistant
client = OpenAI(api_key=OPENAI_API_KEY)
assistant = client.beta.assistants.retrieve(ASSISTANT_ID)

# Apply custom CSS
st.html("""
        <style>
            #MainMenu {visibility: hidden}
            #header {visibility: hidden}
            #footer {visibility: hidden}
            .block-container {
                padding-top: 3rem;
                padding-bottom: 2rem;
                padding-left: 3rem;
                padding-right: 3rem;
                }
        </style>
        """)

# Initialise session state
for session_state_var in ["file_uploaded"]:
    if session_state_var not in st.session_state:
        st.session_state[session_state_var] = False

# Moderation check
def moderation_endpoint(text) -> bool:
    """
    Checks if the text is triggers the moderation endpoint

    Args:
    - text (str): The text to check

    Returns:
    - bool: True if the text is flagged
    """
    response = client.moderations.create(input=text)
    return response.results[0].flagged

# UI
st.subheader("üîÆ Ask a question to Shrila Prabhupada's books.")

# add page reload button:
if st.button("‚ôªÔ∏è New chat"):
    st.session_state.clear()
    st.rerun()

file_upload_box = st.empty()
upload_btn = st.empty()

# # Upload a file
# # File Upload
# if not st.session_state["file_uploaded"]:
#     st.session_state["files"] = file_upload_box.file_uploader("Please upload your dataset(s)",
#                                                               accept_multiple_files=True,
#                                                               type=["csv"])
#
#     if upload_btn.button("Upload"):
#
#         st.session_state["file_id"] = []
#
#         # Upload the file
#         for file in st.session_state["files"]:
#             oai_file = client.files.create(
#                 file=file,
#                 purpose='assistants'
#             )
#
#             # Append the file ID to the list
#             st.session_state["file_id"].append(oai_file.id)
#             print(f"Uploaded new file: \t {oai_file.id}")
#
#         st.toast("File(s) uploaded successfully", icon="üöÄ")
#         st.session_state["file_uploaded"] = True
#         file_upload_box.empty()
#         upload_btn.empty()
#         # The re-run is to trigger the next section of the code
#         st.rerun()

if st.session_state["file_uploaded"] or True:

    # Create a new thread
    if "thread_id" not in st.session_state:
        thread = client.beta.threads.create()
        st.session_state.thread_id = thread.id
        print(st.session_state.thread_id)

    # Update the thread to attach the file
    client.beta.threads.update(
            thread_id=st.session_state.thread_id,
            #tool_resources={"code_interpreter": {"file_ids": [file_id for file_id in st.session_state.file_id]}}
            )

    # Local history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # UI
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            for item in message["items"]:
                item_type = item["type"]
                if item_type == "text":
                    st.markdown(item["content"])
                elif item_type == "image":
                    for image in item["content"]:
                        st.html(image)
                elif item_type == "code_input":
                    with st.status("Code", state="complete"):
                        st.code(item["content"])
                elif item_type == "code_output":
                    with st.status("Results", state="complete"):
                        st.code(item["content"])

    if prompt := st.chat_input("Describe your query in detail. There will be no clarifying questions."):
        #if moderation_endpoint(prompt):
        #    st.toast("Your message was flagged. Please try again.", icon="‚ö†Ô∏è")
        #    st.stop

        st.session_state.messages.append({"role": "user",
                                        "items": [
                                            {"type": "text", 
                                            "content": prompt
                                            }]})
        
        client.beta.threads.messages.create(
            thread_id=st.session_state.thread_id,
            role="user",
            content=f"–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–π–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏ –ø–æ–ª–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã: {prompt}"
        )

        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            stream = client.beta.threads.runs.create(
                thread_id=st.session_state.thread_id,
                assistant_id=ASSISTANT_ID,
                #tool_choice={"type": "code_interpreter"},
                stream=True
            )

            assistant_output = []

            for event in stream:
                print(event)
#                 if isinstance(event, ThreadRunStepCreated):
#                     if event.data.step_details.type == "tool_calls":
#                         assistant_output.append({"type": "code_input",
#                                                 "content": ""})
#
#                         code_input_expander= st.status("Writing code ‚è≥ ...", expanded=True)
#                         code_input_block = code_input_expander.empty()
#
#                 if isinstance(event, ThreadRunStepDelta):
#                     if event.data.delta.step_details.tool_calls[0].code_interpreter is not None:
#                         code_interpretor = event.data.delta.step_details.tool_calls[0].code_interpreter
#                         code_input_delta = code_interpretor.input
#                         if (code_input_delta is not None) and (code_input_delta != ""):
#                             assistant_output[-1]["content"] += code_input_delta
#                             code_input_block.empty()
#                             code_input_block.code(assistant_output[-1]["content"])
#
#                 elif isinstance(event, ThreadRunStepCompleted):
#                     if isinstance(event.data.step_details, ToolCallsStepDetails):
#                         code_interpretor = event.data.step_details.tool_calls[0].code_interpreter
#                         if code_interpretor.outputs is not None:
#                             code_interpretor_outputs = code_interpretor.outputs[0]
#                             code_input_expander.update(label="Code", state="complete", expanded=False)
#                             # Image
#                             if isinstance(code_interpretor_outputs, CodeInterpreterOutputImage):
#                                 image_html_list = []
#                                 for output in code_interpretor.outputs:
#                                     image_file_id = output.image.file_id
#                                     image_data = client.files.content(image_file_id)
#
#                                     # Save file
#                                     image_data_bytes = image_data.read()
#                                     with open(f"images/{image_file_id}.png", "wb") as file:
#                                         file.write(image_data_bytes)
#
#                                     # Open file and encode as data
#                                     file_ = open(f"images/{image_file_id}.png", "rb")
#                                     contents = file_.read()
#                                     data_url = base64.b64encode(contents).decode("utf-8")
#                                     file_.close()
#
#                                     # Display image
#                                     image_html = f'<p align="center"><img src="data:image/png;base64,{data_url}" width=600></p>'
#                                     st.html(image_html)
#
#                                     image_html_list.append(image_html)
#
#                                 assistant_output.append({"type": "image",
#                                                         "content": image_html_list})
#                             # Console log
#                             elif isinstance(code_interpretor_outputs, CodeInterpreterOutputLogs):
#                                 assistant_output.append({"type": "code_output",
#                                                          "content": ""})
#                                 code_output = code_interpretor.outputs[0].logs
#                                 with st.status("Results", state="complete"):
#                                     st.code(code_output)
#                                     assistant_output[-1]["content"] = code_output
#
#                elif isinstance(event, ThreadMessageCreated):
                if isinstance(event, ThreadMessageCreated):
                    assistant_output.append({"type": "text",
                                            "content": ""})
                    assistant_text_box = st.empty()

                elif isinstance(event, ThreadMessageDelta):
                    delta = event.data.delta.content[0]
                    if isinstance(delta, TextDeltaBlock):
                        assistant_text_box.empty()
                        annotations = delta.text.annotations
                        if annotations is not None and len(annotations):
                            for annotation in annotations:
                                assistant_output[-1]["content"] += f" [{annotation.index+1}] "
                        else:
                            assistant_output[-1]["content"] += delta.text.value
                        assistant_text_box.markdown(assistant_output[-1]["content"])

                elif isinstance(event, ThreadMessageCompleted):
                    annotations = event.data.content[0].text.annotations
                    if annotations is not None and len(annotations):
                        assistant_output[-1]["content"] += f"\n\nFiles:\n"
                        index = 0
                        for annotation in annotations:
                            index += 1
                            #message_content.value = message_content.value.replace(
                            #    annotation.text, f"[{index}]"
                            #)
                            if file_citation := getattr(annotation, "file_citation", None):
                                cited_file = client.files.retrieve(file_citation.file_id)
                                assistant_output[-1]["content"] += f"- [{index}] {cited_file.filename}\n"
                                assistant_text_box.markdown(assistant_output[-1]["content"])

                elif isinstance(event, ThreadRunStepCompleted):
                    if event.data.usage is not None:
                        assistant_text_box = st.empty()
                        assistant_output.append({"type": "text",
                                                "content": f"{event.data.usage}"})
                        assistant_text_box.markdown(assistant_output[-1]["content"])

            st.session_state.messages.append({"role": "assistant", "items": assistant_output})

# ThreadMessageCompleted(data=Message(id='msg_iBHSNLIkwEkAmc4jtOsXciMJ', assistant_id='asst_Mur6zlOfYl9kwmc9EYJHud2p', attachments=[], completed_at=1725141840,
#content=[TextContentBlock(text=Text(annotations=[FileCitationAnnotation(end_index=389, file_citation=FileCitation(file_id='file-4YD0SwCRVMU9YoUvogd6Pnnu',
# quote=None), start_index=376, text='„Äê4:15‚Ä†source„Äë', type='file_citation'), FileCitationAnnotation(end_index=746,
# file_citation=FileCitation(file_id='file-sWzPeWCMdrqlrcMyd4NGMw29', quote=None), start_index=734, text='„Äê4:7‚Ä†source„Äë', type='file_citation'),
#  FileCitationAnnotation(end_index=1135, file_citation=FileCitation(file_id='file-MO1yxNzQqxIAuRLdEROFfQV6', quote=None), start_index=1123, text='„Äê4:1‚Ä†source„Äë',
#   type='file_citation'), FileCitationAnnotation(end_index=1419, file_citation=FileCitation(file_id='file-4YD0SwCRVMU9YoUvogd6Pnnu', quote=None),
#   start_index=1407, text='„Äê4:4‚Ä†source„Äë', type='file_citation'), FileCitationAnnotation(end_index=1766,
#   file_citation=FileCitation(file_id='file-MO1yxNzQqxIAuRLdEROFfQV6', quote=None), start_index=1754, text='„Äê4:1‚Ä†source„Äë', type='file_citation'),
#    FileCitationAnnotation(end_index=2014, file_citation=FileCitation(file_id='file-9AoM6vyBUjsxV6kvOKDnym5s', quote=None),
#    start_index=2001, text='„Äê4:16‚Ä†source„Äë', type='file_citation')],
#    value='–ß—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µ, –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–µ–¥–∏—á–µ—Å–∫–æ–º –∑–Ω–∞–Ω–∏–∏ –∏ —É—á–µ–Ω–∏—è—Ö –®—Ä–∏–ª—ã –ü—Ä–∞–±—Ö—É–ø–∞–¥—ã.\n\n1. **–ó–Ω–∞–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–∞—Ä–º–µ**: –í–µ–¥—ã —É—á–∞—Ç, —á—Ç–æ –Ω–∞—à–µ –±—É–¥—É—â–µ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–æ—à–ª–æ–º –∏ –Ω–∞—Å—Ç–æ—è—â–µ–º. –ö–∞–∫ —Å–∫–∞–∑–∞–Ω–æ –≤ ¬´–®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º¬ª, "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–µ–ø–µ–Ω–∏ –æ—Å–∫–≤–µ—Ä–Ω–µ–Ω–∏—è —Ç—Ä–µ–º—è –≥—É–Ω–∞–º–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–µ–±—ã–≤–∞–µ—Ç –≤ —Ç—Ä–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"„Äê4:15‚Ä†source„Äë. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞—à–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç—É–ø–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –Ω–∞—à—É —Å—É–¥—å–±—É.\n\n2. **–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–±–µ—Å–Ω—ã—Ö —Ç–µ–ª. –í ¬´–®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º¬ª —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è, —á—Ç–æ "–ø—Ä–æ–∏–∑–≤–æ–¥—è —Ä–∞—Å—á–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Å–≤–µ—Ç–∏–ª, –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞—Å –≤ –±—É–¥—É—â–µ–º"„Äê4:7‚Ä†source„Äë. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ.\n\n3. **–î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞**: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã–µ –¥—É—à–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤–µ–ª–∏–∫–∏–π –º—É–¥—Ä–µ—Ü –í—å—è—Å–∞–¥–µ–≤–∞, –º–æ–≥—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É –ø—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª—É–∂–µ–Ω–∏—è –∏ –∏–∑—É—á–µ–Ω–∏–µ —Å–≤—è—â–µ–Ω–Ω—ã—Ö –ø–∏—Å–∞–Ω–∏–π„Äê4:1‚Ä†source„Äë. –≠—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –±—É–¥—É—â–µ–≥–æ.\n\n4. **–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏**: –í–µ–¥—ã —É—á–∞—Ç, —á—Ç–æ –≤—Ä–µ–º—è –æ—Å–∫–≤–µ—Ä–Ω–µ–Ω–æ —Ç—Ä–µ–º—è –≥—É–Ω–∞–º–∏ (–±–ª–∞–≥–æ—Å—Ç—å—é, —Å—Ç—Ä–∞—Å—Ç—å—é –∏ –Ω–µ–≤–µ–∂–µ—Å—Ç–≤–æ–º), –∏ –Ω–∞—à–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –≤ –∫–∞–∫–æ–π –≥—É–Ω–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è„Äê4:4‚Ä†source„Äë. –û—Å–æ–∑–Ω–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –Ω–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –Ω–∞—à–µ –±—É–¥—É—â–µ–µ.\n\n5. **–°–ª—É–∂–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ**: –ò—Å—Ç–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ –®—Ä–∏–ª–∞ –ü—Ä–∞–±—Ö—É–ø–∞–¥–∞, —Å—Ç—Ä–µ–º—è—Ç—Å—è —Å–ª—É–∂–∏—Ç—å –¥—Ä—É–≥–∏–º –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–º. –≠—Ç–æ —Å–ª—É–∂–µ–Ω–∏–µ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–ª–∞–≥–æ –¥—Ä—É–≥–∏–º, –Ω–æ –∏ –æ—á–∏—â–∞–µ—Ç –¥—É—à—É, –ø–æ–∑–≤–æ–ª—è—è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µ„Äê4:1‚Ä†source„Äë.\n\n6. **–°–º–∏—Ä–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å**: –í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å. –û–Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Å–º–∏—Ä–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç–∏ –ë–æ–≥—É. –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç –ì–æ—Å–ø–æ–¥—å –ö—Ä–∏—à–Ω–∞ –≤ ¬´–ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç–µ¬ª, "–ú–æ–π –ø—Ä–µ–¥–∞–Ω–Ω—ã–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≥–∏–±–Ω–µ—Ç"„Äê4:16‚Ä†source„Äë. –≠—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –∏ —Å–ª—É–∂–µ–Ω–∏–µ –ë–æ–≥—É –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ª—É—á—à–µ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–≤–æ–µ–π —Å—É–¥—å–±—ã.\n\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—á–µ—Ç–∞—Ç—å –∑–Ω–∞–Ω–∏–µ –æ –∫–∞—Ä–º–µ, –∏–∑—É—á–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, –¥—É—Ö–æ–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ª—É–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º. –≠—Ç–æ –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Å–∏–ª–∏–π, –Ω–æ –æ–Ω –≤–µ–¥–µ—Ç –∫ –≥–ª—É–±–æ–∫–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é –∂–∏–∑–Ω–∏ –∏ —Å–≤–æ–µ–≥–æ –º–µ—Å—Ç–∞ –≤ –Ω–µ–π.'),
#     type='text')], created_at=1725141828, incomplete_at=None, incomplete_details=None, metadata={}, object='thread.message',
#     role='assistant', run_id='run_wpP8tkSdWrQTbpCeIfJ2Qogm', status='completed', thread_id='thread_2c7IG9eGLIJfJWNlmXDEKnSr'), event='thread.message.completed')



